[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "netball-analysis"
version = "1.0.0"
description = "AI-powered netball game analysis system with MSSS 2025 rules compliance"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "MIT"}
authors = [
    {name = "Netball Analysis Team", email = "team@netball-analysis.com"},
]
keywords = ["netball", "sports", "analysis", "computer-vision", "ai", "msss"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Image Recognition",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

dependencies = [
    "ultralytics>=8.0.0",
    "opencv-python-headless>=4.8.0",
    "numpy>=1.21.0",
    "scipy>=1.9.0",
    "scikit-learn>=1.1.0",
    "lap>=0.4.0",
    "cython>=0.29.0",
    "filterpy>=1.4.0",
    "fastapi>=0.100.0",
    "uvicorn[standard]>=0.22.0",
    "streamlit>=1.25.0",
    "pandas>=1.5.0",
    "matplotlib>=3.6.0",
    "seaborn>=0.12.0",
    "plotly>=5.15.0",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
    "aiofiles>=23.0.0",
    "pyyaml>=6.0",
    "requests>=2.31.0",
    "pillow>=10.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "black>=23.0.0",
    "ruff>=0.0.280",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.25.0",
]

test = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
]

docs = [
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "myst-parser>=2.0.0",
    "sphinx-autodoc-typehints>=1.24.0",
]

[project.urls]
Homepage = "https://github.com/netball-analysis/netball-analysis"
Documentation = "https://netball-analysis.readthedocs.io"
Repository = "https://github.com/netball-analysis/netball-analysis"
Issues = "https://github.com/netball-analysis/netball-analysis/issues"

[project.scripts]
netball-analyze = "scripts.run_local:main"
netball-calibrate = "scripts.calibrate_homography:main"
netball-standings = "scripts.standings:main"
netball-validate = "scripts.validate_setup:main"

[tool.setuptools.packages.find]
where = ["."]
include = ["core*", "app*", "scripts*", "web*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.md", "*.txt"]

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ultralytics.*",
    "cv2.*",
    "lap.*",
    "filterpy.*",
    "streamlit.*",
    "plotly.*",
    "seaborn.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=core",
    "--cov=app",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["core", "app"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]


